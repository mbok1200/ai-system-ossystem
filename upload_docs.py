#!/usr/bin/env python3
import argparse
import sys
import os
import logging
from pathlib import Path

from document_loader import DocumentLoader

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤ Pinecone")
    parser.add_argument('--file', help='–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª')
    parser.add_argument('--directory', help='–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó')
    parser.add_argument('--recursive', action='store_true', help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –≤ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö')
    parser.add_argument('--check', action='store_true', help='–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω —ñ–Ω–¥–µ–∫—Å—É')
    
    args = parser.parse_args()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º —ñ–Ω–¥–µ–∫—Å—É
        loader = DocumentLoader("streamlit", auto_create_index=True, dimension=768)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–¥–µ–∫—Å—É
        if args.check:
            print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞–Ω —ñ–Ω–¥–µ–∫—Å—É...")
            status = loader.check_index_status()
            
            print(f"üìä –Ü–Ω–¥–µ–∫—Å 'streamlit':")
            print(f"   –Ü—Å–Ω—É—î: {status['exists']}")
            print(f"   –í–µ–∫—Ç–æ—Ä—ñ–≤: {status.get('total_vectors', 0)}")
            print(f"   –†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å: {status.get('dimension', 'N/A')}")
            print(f"   –ü–æ—Ä–æ–∂–Ω—ñ–π: {status['is_empty']}")
            
            if status.get('namespaces'):
                print(f"   Namespaces:")
                for ns, data in status['namespaces'].items():
                    ns_name = f"'{ns}'" if ns else "'(–ø–æ—Ä–æ–∂–Ω—ñ–π)'"
                    print(f"      {ns_name}: {data['vector_count']} –≤–µ–∫—Ç–æ—Ä—ñ–≤")
            
            return
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        if args.file:
            file_path = Path(args.file)
            if not file_path.exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {file_path}")
                return
            
            print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª: {file_path.name}")
            result = loader.load_file(file_path)
            
            if result['success']:
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {result['chunks_created']} —á–∞–Ω–∫—ñ–≤, {result['vectors_uploaded']} –≤–µ–∫—Ç–æ—Ä—ñ–≤")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
            return
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        if args.directory:
            print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {args.directory}")
            result = loader.load_directory(args.directory, recursive=args.recursive)
            
            if result['success']:
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {result['successful']}/{result['total_files']} —Ñ–∞–π–ª—ñ–≤ —É—Å–ø—ñ—à–Ω–æ")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
            return
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
        print("‚ùì –í–∫–∞–∂—ñ—Ç—å --file, --directory –∞–±–æ --check")
        parser.print_help()
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"üí• –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()