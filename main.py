import json
import gradio as gr
import os
from typing import Dict
from dotenv import load_dotenv
from ai_system import AISystem
from history_manager import AdvancedHistoryManager
from interfaces.dialogue_state import DialogueState

load_dotenv(".env")
history_manager = AdvancedHistoryManager()
def load_file_map() -> Dict[str, str]:
    file_map = {}
    try:
        # Try UTF-8 first, then fallback to other encodings
        encodings_to_try = ['utf-8', 'utf-8-sig', 'cp1251', 'latin1']
        
        for encoding in encodings_to_try:
            try:
                with open("./data/gdrive_file_map.json", "r", encoding=encoding) as f:
                    file_map = json.load(f)
                print(f"‚úÖ File map loaded successfully with {encoding} encoding")
                break
            except (UnicodeDecodeError, UnicodeError):
                continue
        else:
            print("‚ùå Could not decode file with any encoding, using empty map")
            
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª gdrive_file_map.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –ø–æ—Ä–æ–∂–Ω—é –º–∞–ø—É")
        # Create the data directory and empty file if it doesn't exist
        os.makedirs("./data", exist_ok=True)
        with open("./data/gdrive_file_map.json", "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON parsing error: {e}")
        print("‚ö†Ô∏è Using empty file map")
    except Exception as e:
        print(f"‚ùå Unexpected error loading file map: {e}")
        print("‚ö†Ô∏è Using empty file map")
    
    return file_map
file_map = load_file_map()

ai_system = AISystem(state=DialogueState())
def load_previous_session(session_list: str, session_state: dict) -> tuple:
    if session_list:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π dict —è–∫—â–æ session_state —î tuple –∞–±–æ None
        if not isinstance(session_state, dict):
            session_state = {}
            
        session_state["session_id"] = session_list
        
        # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ history_manager –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        history = history_manager.get_session_history(session_list, format_type="messages")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        formatted_history = []
        for msg in history:
            if isinstance(msg, dict) and "role" in msg and "content" in msg:
                formatted_history.append(msg)
            elif isinstance(msg, (list, tuple)) and len(msg) >= 2:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç [user_msg, bot_msg] –≤ –Ω–æ–≤–∏–π
                formatted_history.append({"role": "user", "content": str(msg[0])})
                formatted_history.append({"role": "assistant", "content": str(msg[1])})
        
        return formatted_history, session_state
    return [], session_state if isinstance(session_state, dict) else {}

def clear_chat(session_state: dict) -> tuple:
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é —Ç–∞ –æ—á–∏—â–∞—î —á–∞—Ç"""
    if not isinstance(session_state, dict):
        session_state = {}
        
    new_session_id = history_manager.create_session()
    session_state["session_id"] = new_session_id
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è chatbot —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–∏–π session_state
    return [], session_state

def chat_interface(message: str, history: list, mode: str, session_state: dict) -> tuple:
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π dict —è–∫—â–æ session_state —î tuple –∞–±–æ None
    if not isinstance(session_state, dict):
        session_state = {}
   
    if "session_id" not in session_state:
        session_state["session_id"] = history_manager.create_session({
            "mode": mode,
            "created_by": "gradio_interface"
        })
    
    session_id = session_state["session_id"]
    ai_system.state.update(
        user_input=message,
        session_state=session_state,
    )
    user_message = {"role": "user", "content": message}
    history.append(user_message)
    history_manager.save_message(session_id, "user", message)
    # –î–æ–¥–∞—î–º–æ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä —É —á–∞—Ç
    loader_message = {"role": "assistant", "content": "‚è≥ –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥—Ä—É–∫—É—î..."}
    history.append(loader_message)
    yield "", history, session_state

    try:
        result = ai_system.process_query()
        response = result.response_messages[-1]["content"] if result.response_messages else "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç."
        # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
        history = [msg for msg in history if msg != loader_message]
        assistant_message = {"role": "assistant", "content": response}
        history.append(assistant_message)
        history_manager.save_message(session_id, "assistant", response)
        yield "", history, session_state
    except Exception as e:
        history = [msg for msg in history if msg != loader_message]
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        error_response = {"role": "assistant", "content": error_message}
        history.append(error_response)
        yield "", history, session_state

def create_interface():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Gradio —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    
    # –ö–∞—Å—Ç–æ–º–Ω–∏–π CSS
    css = """
    .gradio-container {
        max-width: 1200px !important;
        margin: 0 auto;
        width: 100% !important;
        height: 100% !important;
    }
    .chat-message {
        padding: 10px;
        margin: 5px 0;
        border-radius: 10px;
    }
    """

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–µ—Å—ñ–π
    def get_session_choices():
        try:
            sessions = history_manager.get_sessions()
            return [
                (f"–°–µ—Å—ñ—è {s['session_id'][:8]}... ({s['message_count']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)", s['session_id'])
                for s in sessions
            ]
        except Exception as e:
            print(f"Error getting sessions: {e}")
            return []

    with gr.Blocks(title="ü§ñ AI Assistant", css=css, theme=gr.themes.Soft(), fill_height=True, fill_width=True) as app:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ State –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º dict
        session_state = gr.State(value={})
        
        gr.Markdown(
            """
            # ü§ñ AI Assistant RAG + Function Calling + Google Search
            –°–∏—Å—Ç–µ–º–∞ –ø–æ—î–¥–Ω—É—î: üìö **RAG**, üîß **Function Calling**, üîç **Google Search** 
            """
        )
        
        with gr.Row(scale=2):
            with gr.Column():
                chatbot = gr.Chatbot(
                    height=500,
                    placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç —ñ —è –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...",
                    avatar_images=(
                        "https://cdn-icons-png.flaticon.com/512/3135/3135715.png",  # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                        "https://cdn-icons-png.flaticon.com/512/4712/4712027.png"   # –±–æ—Ç
                    ),
                    type="messages"
                )

                with gr.Row():
                    msg = gr.Textbox(
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç —Ç—É—Ç...",
                        container=False,
                        scale=4
                    )
                    send_btn = gr.Button("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", variant="primary", scale=1)

                # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è
                clear_btn = gr.ClearButton([msg, chatbot], value="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏")
                
        with gr.Sidebar(position="left"):
            with gr.Column(scale=1):
                gr.Markdown("## üí° –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:")
                
                examples = [
                    "üéØ –∑–∞–≤–¥–∞–Ω–Ω—è #12345",
                    "üìÖ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", 
                    "‚è∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ 4 –≥–æ–¥–∏–Ω–∏ –¥–ª—è #12345",
                    "üìä —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è Bug 123",
                    "üë§ –º–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "üîç –ø–æ—à—É–∫ —É Redmine API",
                    "üìö wiki —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç",
                    "‚ùì —â–æ —Ç–∞–∫–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç?"
                ]
                
                for example in examples:
                    gr.Markdown(example)
                    
                # with gr.Group():
                #     gr.Markdown("## üöÄ –®–≤–∏–¥–∫—ñ —Ä–µ–∂–∏–º–∏:")
                    
                #     mode_buttons = gr.Radio(
                #         choices=[
                #             ("üìö –¢—ñ–ª—å–∫–∏ Redmine", "redmine"),
                #             ("üîç –ë–∞–∑–∞ + –≤–µ–±-–ø–æ—à—É–∫", "hybrid"),
                #             ("üåê –¢—ñ–ª—å–∫–∏ –≤–µ–±-–ø–æ—à—É–∫", "web_only")
                #         ],
                #         value="hybrid",
                #         label="–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:",
                #         info="–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –ø–æ—à—É–∫—É"
                #     )
                    
                # gr.Markdown("## ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
                status_info = []
                
                # # Pinecone
                # pinecone_status = "‚úÖ" if os.getenv("PINECONE_API_KEY") else "‚ùå"
                # status_info.append(f"{pinecone_status} Pinecone RAG")
                
                # # OpenAI
                # openai_status = "‚úÖ" if os.getenv("OPENAI_API_KEY") else "‚ùå"
                # status_info.append(f"{openai_status} OpenAI")
                
                # # Redmine
                # redmine_status = "‚úÖ" if os.getenv("REDMINE_API_KEY") else "‚ùå"
                # status_info.append(f"{redmine_status} Redmine API")
                
                # # Google
                # google_status = "‚úÖ" if os.getenv("GOOGLE_API_KEY") else "‚ùå"
                # status_info.append(f"{google_status} Google Search")
                
                # gr.Markdown("\n\n".join(status_info))
                
        # with gr.Sidebar(position="right"):
        #     gr.Markdown("## üìö –Ü—Å—Ç–æ—Ä—ñ—è —Å–µ—Å—ñ–π")
            
        #     # Dropdown –¥–ª—è –≤–∏–±–æ—Ä—É —Å–µ—Å—ñ—ó –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ choices
        #     session_dropdown = gr.Dropdown(
        #         choices=get_session_choices(),  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ —Å–µ—Å—ñ—è–º–∏
        #         label="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–µ—Å—ñ—ó",
        #         info="–í–∏–±–µ—Ä—ñ—Ç—å —Å–µ—Å—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
        #         allow_custom_value=False
        #     )

        #     load_session_btn = gr.Button("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Å—ñ—é", size="sm")
        #     refresh_sessions_btn = gr.Button("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", size="sm")
        #     remove_sessions_btn = gr.Button("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é", size="sm")

        # Event handlers - after all components are defined
        # def refresh_sessions():
        #     """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π –≤ dropdown"""
        #     new_choices = get_session_choices()
        #     return gr.Dropdown(choices=new_choices, value=None)
        # def remove_session(input_session: str):
        #     history_manager.delete_session(input_session)
        # load_session_btn.click(
        #     load_previous_session,
        #     inputs=[session_dropdown, session_state],
        #     outputs=[chatbot, session_state]
        # )
        
        # refresh_sessions_btn.click(
        #     refresh_sessions, 
        #     outputs=[session_dropdown]
        # )
        # remove_sessions_btn.click(
        #     remove_session,
        #     inputs=[session_dropdown]
        # )
        # Chat events
        msg.submit(
            chat_interface, 
            inputs=[msg, chatbot, session_state], 
            outputs=[msg, chatbot, session_state], 
            queue=True
        )
        
        send_btn.click(
            chat_interface, 
            inputs=[msg, chatbot, session_state], 
            outputs=[msg, chatbot, session_state], 
            queue=True
        )
        
        # Clear button event - –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ outputs
        clear_btn.click(
            clear_chat,
            inputs=[session_state],
            outputs=[chatbot, session_state]  # –î–æ–¥–∞–Ω–æ chatbot –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
        )
    
    return app

if __name__ == "__main__":
    required_vars = [
        "OPENAI_API_KEY",
        "PINECONE_API_KEY", 
        "PINECONE_ENV",
        "PINECONE_INDEX_NAME"
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    app = create_interface()
    app.queue(max_size=20)
    app.launch(
        server_name="0.0.0.0",
        server_port=7861,
        share=False,
        show_error=True
    )