import requests, os
from typing import Dict
from datetime import datetime, timedelta
from interfaces.dialogue_state import DialogueState
from interfaces.redmine_state import RedmineState
class RedmineAPI:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Redmine API"""
    
    def __init__(self):
        self.state = RedmineState()

    def _make_request(self, patch: str, method: str = "GET", params: Dict = None) -> Dict:
        print(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Redmine API: {method} {params}/{patch}")
        """–ë–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Redmine"""
        if not self.state.redmine_url or not self.state.redmine_api_key:
            raise Exception("Redmine API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        
        url = f"{self.state.redmine_url}/{patch}.json"
        headers = {
            'X-Redmine-API-Key': self.state.redmine_api_key,
            'Content-Type': 'application/json'
        }
        
        try:
            if method == "GET":
                response = requests.get(url, headers=headers, params=params)
            elif method == "POST":
                response = requests.post(url, headers=headers, json=params)
            elif method == "PUT":
                response = requests.put(url, headers=headers, json=params)
            else:
                raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ Redmine API: {str(e)}")

    def access_to_redmine(self, state: DialogueState) -> DialogueState:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Redmine API"""
        try:
            url = f"{self.base_url}/issues.json"
            headers = {'X-Redmine-API-Key': self.api_key}
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            state.context = "‚úÖ –î–æ—Å—Ç—É–ø –¥–æ Redmine API –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"
            return state
        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Redmine API: {str(e)}"
            return state
    def get_my_issues(self, state: DialogueState) -> DialogueState:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            params = {
                'assigned_to_id': self.state.user_id,
                'status_id': '*',
                'limit': 5
            }
            data = self._make_request('issues', params=params)
            
            if not data.get('issues'):
                state.context = "üìã –ó–∞–≤–¥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                return state
            
            issues_text = [self._format_issue_short(issue) for issue in data['issues']]
            state.context = "üìã –í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n" + "\n".join(issues_text)
            return state
            
        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å: {str(e)}"
            return state
    def get_issue_by_id(self, state: DialogueState) -> DialogueState:
        issue_id = state.function_calls[0].get("arguments", {}).get("issue_id", "")
        try:
            # –û—á–∏—â—É—î–º–æ ID –≤—ñ–¥ # —è–∫—â–æ —î
            clean_id = issue_id.replace('#', '').strip()
            
            url = f"{self.base_url}/issues/{clean_id}.json"
            headers = {'X-Redmine-API-Key': self.api_key}
            
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            
            issue = response.json()['issue']
            state.context = self._format_issue(issue)
            return state

        except Exception as e:
            state.context = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {issue_id}: {str(e)}"
            return state

    def get_issue_by_date(self, state: DialogueState) -> DialogueState:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∑–∞ –¥–∞—Ç–æ—é"""
        date = state.function_calls[0].get("arguments", {}).get("date", "")
        try:
            # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É
            parsed_date = self._parse_date(date)
            print(f"–ü–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω—å –∑–∞ –¥–∞—Ç–æ—é: {parsed_date}")

            params = {
                'assigned_to_id': self.state.user_id,
                'updated_on': f">={parsed_date}",
                'limit': 10
            }
            
            data = self._make_request('issues', params=params)
            
            if not data.get('issues'):
                state.context = f"üìÖ –ù–∞ {date} –∑–∞–≤–¥–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                return state

            issues_text = [self._format_issue_short(issue) for issue in data['issues']]
            state.context = f"üìÖ –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ {date}:\n\n" + "\n".join(issues_text)
            return state

        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞–≤–¥–∞–Ω—å –∑–∞ –¥–∞—Ç–æ—é {date}: {str(e)}"
            return state
    
    def search_issues(self, state: DialogueState) -> DialogueState:
        """–ü–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω—å –∑–∞ —Ç–µ–∫—Å—Ç–æ–º"""
        search_term = state.function_calls[0].get("arguments", {}).get("search_term", "")
        try:
            params = {
                'assigned_to_id': self.user_id,
                'subject': f"~{search_term}",
                'limit': 5
            }

            data = self._make_request('issues', params=params)

            if not data.get('issues'):
                state.context = f"üîç –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{search_term}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                return state

            issues_text = [self._format_issue_short(issue) for issue in data['issues']]
            state.context = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É '{search_term}':\n\n" + "\n".join(issues_text)
            return state

        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}"
            return state

    def get_issue_by_name(self, state: DialogueState) -> DialogueState:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –Ω–∞–∑–≤–æ—é"""
        issue_name = state.function_calls[0].get("arguments", {}).get("issue_name", "")
        try:
            params = {
                'assigned_to_id': self.user_id,
                'status_id': 'open',
                'subject': f"~{issue_name}",
                'limit': 5
            }

            data = self._make_request('issues', params=params)

            if not data.get('issues'):
                state.context = f"üîç –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{issue_name}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                return state

            issues_text = [self._format_issue_short(issue) for issue in data['issues']]
            state.context = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É '{issue_name}':\n\n" + "\n".join(issues_text)
            return state

        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}"
            return state
    def get_issue_hours(self, state: DialogueState) -> DialogueState:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–¥–∏–Ω –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—é"""
        issue_name = state.function_calls[0].get("arguments", {}).get("issue_name", "")
        try:
            params = {
                'assigned_to_id': self.user_id,
                'subject': f"~{issue_name}",
                'limit': 1
            }

            data = self._make_request('issues', params=params)

            if not data.get('issues'):
                state.context = f"üîç –ó–∞ –∑–∞–ø–∏—Ç–æ–º '{issue_name}' –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                return state

            issue = data['issues'][0]
            hours = issue.get('estimated_hours', 0)
            state.context = f"‚è±Ô∏è –ì–æ–¥–∏–Ω–∏ –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—é '{issue_name}': {hours} –≥–æ–¥."
            return state

        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–¥–∏–Ω –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—é '{issue_name}': {str(e)}"
            return state
    def fill_issue_hours(self, state: DialogueState ) -> DialogueState:
        """–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≥–æ–¥–∏–Ω –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—é"""
        issue_id = state.function_calls[0].get("arguments", {}).get("issue_id", "")
        hours = state.function_calls[0].get("arguments", {}).get("hours", 0)
        description = state.function_calls[0].get("arguments", {}).get("description", "")
        try:
            clean_id = issue_id.replace('#', '').strip()
            
            url = f"{self.base_url}/issues/{clean_id}.json"
            headers = {
                'X-Redmine-API-Key': self.api_key,
                'Content-Type': 'application/json'
            }
            
            data = {
                'issue': {
                    'estimated_hours': hours,
                    'notes': description
                }
            }
            
            response = requests.put(url, headers=headers, json=data)
            response.raise_for_status()
            state.context = f"‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–æ {hours} –≥–æ–¥. –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{clean_id}"
            return state

        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≥–æ–¥–∏–Ω: {str(e)}"
            return state
    def get_user_status(self, state: DialogueState) -> DialogueState:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            url = f"{self.base_url}/users/{self.user_id}.json"
            headers = {'X-Redmine-API-Key': self.api_key}
            
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            
            user = response.json()['user']
            status = user.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')
            state.context = f"üë§ –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {status}"
            return state

        except Exception as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}"
    def set_user_status(self, state: DialogueState) -> DialogueState:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        status = state.function_calls[0].get("arguments", {}).get("status", "")
        try:
            url = f"{self.base_url}/users/{self.user_id}.json"
            headers = {
                'X-Redmine-API-Key': self.api_key,
                'Content-Type': 'application/json'
            }
            
            data = {
                'user': {
                    'status': status
                }
            }
            
            response = requests.put(url, headers=headers, json=data)
            response.raise_for_status()
            state.context = f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status}"
            return state
            
        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {str(e)}"
            return state
    def create_issue(self, state: DialogueState) -> DialogueState:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        subject = state.function_calls[0].get("arguments", {}).get("subject", "")
        description = state.function_calls[0].get("arguments", {}).get("description", "")
        priority = state.function_calls[0].get("arguments", {}).get("priority", "Normal")
        try:
            url = f"{self.base_url}/issues.json"
            headers = {
                'X-Redmine-API-Key': self.api_key,
                'Content-Type': 'application/json'
            }
            
            data = {
                'issue': {
                    'subject': subject,
                    'description': description,
                    'priority_id': self._get_priority_id(priority)
                }
            }
            
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            
            issue = response.json()['issue']
            state.context = f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {self._format_issue(issue)}"
            return state
            
        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}"
            return state
    def assign_issue(self, state: DialogueState) -> DialogueState: 
        """–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        issue_id = state.function_calls[0].get("arguments", {}).get("issue_id", "")
        user_id = state.function_calls[0].get("arguments", {}).get("user_id", "")
        try:
            clean_id = issue_id.replace('#', '').strip()
            
            url = f"{self.base_url}/issues/{clean_id}.json"
            headers = {
                'X-Redmine-API-Key': self.api_key,
                'Content-Type': 'application/json'
            }
            
            data = {
                'issue': {
                    'assigned_to_id': user_id
                }
            }
            
            response = requests.put(url, headers=headers, json=data)
            response.raise_for_status()
            state.context = f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è #{clean_id} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}"
            return state            
        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è #{issue_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}"
            return state
    def get_wiki_info(self, state: DialogueState) -> DialogueState:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ Wiki"""
        topic = state.function_calls[0].get("arguments", {}).get("topic", "")
        try:
            url = f"{self.base_url}/wiki/{topic}.json"
            headers = {'X-Redmine-API-Key': self.api_key}
            
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            
            wiki_info = response.json()['wiki']
            state.context = f"üìñ Wiki —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ {topic}:\n\n{wiki_info['content'][:200]}..."
            return state

        except Exception as e:
            state.context = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Wiki —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {str(e)}"
            return state

    def _format_issue(self, issue: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        issue_id = issue['id']
        title = issue.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        status = issue.get('status', {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')
        priority = issue.get('priority', {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')
        assignee = issue.get('assigned_to', {}).get('name', '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ')
        description = issue.get('description', '')[:200] + '...' if issue.get('description') else ''

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
        issue_link = f"{self.state.redmine_url}/issues/{issue_id}"

        return f"""üéØ **–ó–∞–≤–¥–∞–Ω–Ω—è #{issue_id}**
üîó **–ü–æ—Å–∏–ª–∞–Ω–Ω—è:** {issue_link}
üìù **–ù–∞–∑–≤–∞:** {title}
üìä **–°—Ç–∞—Ç—É—Å:** {status}
‚ö° **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** {priority}
üë§ **–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π:** {assignee}
üìÑ **–û–ø–∏—Å:** {description}"""

    def _format_issue_short(self, issue: Dict) -> str:
        """–ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º"""
        issue_id = issue['id']
        title = issue.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        status = issue.get('status', {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–æ')

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        issue_link = f"{self.state.redmine_url}/issues/{issue_id}"

        return f"**[#{issue_id}]({issue_link}) - {title} ({status})**"
    def _parse_date(self, date_str: str) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç Redmine"""
        date_str = date_str.lower().strip()
        
        today = datetime.now()
        
        if date_str in ['—Å—å–æ–≥–æ–¥–Ω—ñ', 'today']:
            return today.strftime('%Y-%m-%d')
        elif date_str in ['–≤—á–æ—Ä–∞', 'yesterday']:
            return (today - timedelta(days=1)).strftime('%Y-%m-%d')
        elif date_str in ['–∑–∞–≤—Ç—Ä–∞', 'tomorrow']:
            return (today + timedelta(days=1)).strftime('%Y-%m-%d')
        else:
            # –°–ø—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –¥–∞—Ç—É
            try:
                # –§–æ—Ä–º–∞—Ç –¥–¥.–º–º.—Ä—Ä—Ä—Ä –∞–±–æ –¥–¥.–º–º
                if '.' in date_str:
                    parts = date_str.split('.')
                    if len(parts) == 2:
                        day, month = int(parts[0]), int(parts[1])
                        year = today.year
                        return f"{year:04d}-{month:02d}-{day:02d}"
                    elif len(parts) == 3:
                        day, month, year = int(parts[0]), int(parts[1]), int(parts[2])
                        if year < 100:
                            year += 2000
                        return f"{year:04d}-{month:02d}-{day:02d}"
            except ValueError:
                pass
        
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ
        return today.strftime('%Y-%m-%d')