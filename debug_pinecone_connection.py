import os
from pinecone import Pinecone
from dotenv import load_dotenv

load_dotenv(".env")

def debug_pinecone():
    """–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Pinecone"""
    
    print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—è—é Pinecone –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
    
    # API –∫–ª—é—á
    api_key = os.getenv("PINECONE_API_KEY")
    index_name = os.getenv("PINECONE_INDEX_NAME", "streamlit")
    
    print(f"üîë API Key: {api_key[:20]}..." if api_key else "‚ùå API Key –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
    print(f"üìã Index Name: {index_name}")
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        pc = Pinecone(api_key=api_key)
        print("‚úÖ Pinecone client —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –°–ø–∏—Å–æ–∫ —ñ–Ω–¥–µ–∫—Å—ñ–≤
        indexes = pc.list_indexes()
        available_indexes = [idx.name for idx in indexes]
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏: {available_indexes}")
        
        if index_name not in available_indexes:
            print(f"‚ùå –Ü–Ω–¥–µ–∫—Å '{index_name}' –ù–ï –Ü–°–ù–£–Ñ!")
            return False
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω–¥–µ–∫—Å—É
        index = pc.Index(index_name)
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —ñ–Ω–¥–µ–∫—Å—É '{index_name}'")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = index.describe_index_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–Ω–¥–µ–∫—Å—É:")
        print(f"   Total vectors: {stats.total_vector_count}")
        print(f"   Dimension: {stats.dimension}")
        print(f"   Namespaces: {dict(stats.namespaces) if stats.namespaces else 'Default'}")
        
        # –¢–µ—Å—Ç–æ–≤–∏–π upsert
        print("\nüß™ –¢–µ—Å—Ç–æ–≤–∏–π upsert...")
        test_vector = {
            'id': 'test-vector-123',
            'values': [0.1] * stats.dimension,
            'metadata': {'test': 'true', 'timestamp': '2025-07-16'}
        }
        
        response = index.upsert(vectors=[test_vector])
        print(f"üì§ Upsert response: {response}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–¥–∞–≤—Å—è
        import time
        time.sleep(2)  # –ß–µ–∫–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é
        
        query_result = index.query(
            vector=[0.1] * stats.dimension,
            top_k=1,
            include_metadata=True
        )
        
        print(f"üîç Query result: {len(query_result.matches)} matches")
        if query_result.matches:
            match = query_result.matches[0]
            print(f"   ID: {match.id}, Score: {match.score}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä
        index.delete(ids=['test-vector-123'])
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä –≤–∏–¥–∞–ª–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

if __name__ == "__main__":
    debug_pinecone()